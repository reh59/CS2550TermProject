// Copyright 2008,2009,2010 Massachusetts Institute of Technology.
// All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

#ifndef RANDOMGENERATOR_H__
#define RANDOMGENERATOR_H__

#include <vector>

#include <cstdlib>  // for struct random_data

#ifdef __linux__
#define HAVE_RANDOM_R
#define _RANDOM_MAX_ RAND_MAX
#else
// nrand48 has a max value of 2**31 - 1 (inclusive). This is the max value of int32_t
#define _RANDOM_MAX_ 2147483647
#endif

// A random number generator that uses random_r.
class RandomGenerator {
public:
    // Seeds the generator using seedDefault
    RandomGenerator();

    // Returns a pseudo-random number from 0 to maximum().
    int32_t random();

    // Returns the maximum value that can be generated by random() (inclusive).
    static int32_t maximum() { return _RANDOM_MAX_; }

    // Seed the generator with seed.
    void seed(unsigned int seed);

    // Seed the generator with the current time and thread id.
    void seedDefault();

    // Selects num_shuffle elements from members at random without replacement. This generates
    // a random permutation of members.
    void shuffle(std::vector<int>* members, int num_shuffle);

private:
#ifdef HAVE_RANDOM_R
    // man random says optimal sizes are 8, 32, 64, 128, 256 bytes
    static const int RANDOM_STATE_SIZE = 64;
    char state_array[RANDOM_STATE_SIZE];
    struct random_data state;
#else
    unsigned short state[3];
#endif
};

#undef _RANDOM_MAX_

#endif
